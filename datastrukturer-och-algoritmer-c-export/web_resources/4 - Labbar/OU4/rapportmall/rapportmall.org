#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:4
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t latex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: 5DV149 LP4 --- Assignment 4
#+DATE: 2022-05-19
#+AUTHOR: Niclas Borlin (=niclas.borlin@cs.umu.se=)
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.1 (Org mode 9.1.14)
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \usepackage[a4paper]{anysize}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{xparse}
#+LATEX_HEADER: \newminted{c}{tabsize=4,obeytabs,autogobble,highlightcolor=gray!20}
#+LATEX_HEADER: \newenvironment{env}{\VerbatimEnvironment\begin{ccode}}{\end{ccode}}
#+LATEX_HEADER: \newmintinline{c}{}
#+LATEX_HEADER: \newmintedfile{c}{tabsize=4,obeytabs,linenos,frame=single,highlightcolor=gray!50}
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE: Graphs\\
#+SUBTITLE: Submission v1.0
#+LATEX_COMPILER: pdflatex

@@latex:\addtocounter{section}{-1}@@
* Code                                                             :noexport:
#+begin_src emacs-lisp
  (setq org-latex-toc-command "\\clearpage \\tableofcontents \\clearpage")

  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("cachedir=/tmp/minted" "minted"))

  (setq org-latex-listings 'minted)

  (setq org-latex-minted-options
	'(("linenos=true" "autogobble")))

  (setq org-latex-pdf-process
	(mapcar
	 (lambda (s)
	   (replace-regexp-in-string "%latex -interaction" "%latex -shell-escape -interaction" s))
	 org-latex-pdf-process))

  (setq org-latex-with-hyperref nil)
#+end_src

#+RESULTS:

* Version history
  :PROPERTIES:
  :CUSTOM_ID: sec:history
  :END:

- v1.0 2022-05-19 :: First submission.[fn:1]

[fn:1] If this is a resubmission, include a list of changes with
respect to the previous submission.

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: sec:intro
  :END:

The target audience is someone with basic understanding in Computing
Science, but not specifically graphs nor the application, e.g., a
future colleague at your work who did not take part in this particular
project. Describe the application and how it connects to graphs. You
may include a figure, e.g. as in figures [[fig:graph1]] and [[fig:graph2]].

#+NAME: fig:graph1
#+CAPTION: Graph illustration corresponding to the file =airmap1.map=, png version.
#+ATTR_LATEX: :width 0.2\hsize :placement [tbp]
[[file:graph1.png]]

#+NAME: fig:graph2
#+CAPTION: Graph illustration corresponding to the file =airmap1.map=, tikz version.
#+ATTR_LATEX: :placement [tbp]
\begin{figure}
  \begin{center}
    \begin{tikzpicture}[node distance=5em,font=\scriptsize]
      \node[draw,circle] (ume) { UME };
      \node[draw,circle,below of=ume] (bma) { BMA };
      \node[draw,circle,below left of=bma] (mmx) { MMX };
      \node[draw,circle,left of=bma] (got) { GOT };
      \node[draw,circle,above right of=ume] (lla) { LLA };
      \node[draw,circle,above of=lla] (pja) { PJA };
      \draw[latex-latex] (ume) -- (bma);
      \draw[latex-latex] (mmx) -- (bma);
      \draw[latex-latex] (got) -- (bma);
      \draw[latex-latex] (lla) -- (pja);
    \end{tikzpicture}
  \end{center}
\end{figure}

* User guide
  :PROPERTIES:
  :CUSTOM_ID: sec:user_guide
  :END:
** Compilation
  :PROPERTIES:
  :CUSTOM_ID: sec:compilation
  :END:
Describe exactly how the reader might compile the code, assuming
he/she has access to the source code, e.g.
#+NAME: example:compile
#+BEGIN_EXAMPLE
  gcc -o is_connected -std=c99 -Wall -I .../path/to/include is_connected.c graph.c
    .../path/to/other/files.c
#+END_EXAMPLE
** File format
  :PROPERTIES:
  :CUSTOM_ID: sec:file_format
  :END:
Describe the file format, including an example, e.g. (NOTE: you MUST change this example!)
#+BEGIN_EXAMPLE
# This is a text file
2
UME BMA # Umea-Bromma
BMA UME # Bromma-Umea
#+END_EXAMPLE
** Test runs
  :PROPERTIES:
  :CUSTOM_ID: sec:test_run
  :END:
Describe a complete test run, i.e., how the program is started, input
and output. Screen dumps can be useful here, but be sure to trim them
to the terminal window where the program is run.
* System description
  :PROPERTIES:
  :CUSTOM_ID: sec:system_description
  :END:

** Data structures
*** Graph
    :PROPERTIES:
    :CUSTOM_ID: sec:graph
    :END:
The graph data structure is central to this assignment. Describe how
you have designed and implemented the data structure. What information
is stored and where? If you use a =struct=, you should probably
describe it and its fields. How is the allocate/deallocate
responsibility handled. What help data structures have you used? How
have you defined equality between nodes? How do you handle (avoid?)
node duplicate in the graph?

Describe each function in the interface to the data type =Graph=. Each
implemented function should be described in some detail, e.g., input,
output, actions and any side effects. The interface should be
organised to be easy to read, e.g., in a table or a bullet list. It is
ok to include the function declaration, e.g.,[fn:minted]
\begin{ccode}
graph *graph_insert_edge(graph *g, node *n1, node *n2);
\end{ccode}
but in the text you should refer to /the graph =g=/, /the node =n1=/,
etc. Never use =*= in the text. Instead, if it is necessary, write
''pointer to...''.

[fn:minted] If you use latex and minted for this kind of color-coding
of source code you must probably need to compile the .tex file with
=pdflatex -shell-escape file.tex=.


You may group and the unimplemented functions separately. The
unimplemented function do not need to be described nor commented, only
listed.

*** Graph #2
    :PROPERTIES:
    :CUSTOM_ID: sec:graph2
    :END:

If you have implemented two different graphs, describe the second
implementation here.

*** Other data structures
    :PROPERTIES:
    :CUSTOM_ID: sec:other_data_structures
    :END:
For each data type from the code base that you have used, e.g.,
=queue=, describe it in a separate subsection. In each section,
describe the datatype briefly in one or a few sentences and then list
all functions in the user interface. Only make references to
/published/ information about the data type. That includes what is
known from the header files but not the source.

** Algorithms
   :PROPERTIES:
   :CUSTOM_ID: sec:algorithms
   :END:
All algorithms must be described in /psedocode/. You may use text to
summarize the algorithm, but each step must be in some form of
bulleted or enumerated list. Remember to use variable names, etc., to
make the algorithm more specific, e.g., ''the current node $n$'', etc.
*** Parsing the text file and constructing the graph
    :PROPERTIES:
    :CUSTOM_ID: sec:parse
    :END:
Describe your algorithm for parsing the text file and constructing the
graph. Depending on your implementation, this may be one algorithm or
two separate ones. You do not have to describe the parsing of each
line in detail.
*** =find_path=
    :PROPERTIES:
    :CUSTOM_ID: sec:find_path
    :END:
Describe your version of the breadth-first-algorithm that you have
implemented in =find_path=.
* Reflections
** Work distribution
If you worked in groups, how has the work been distributed. How have
you made sure that everyone understands each part, including parts
that have been the resposibility of others?
** Reflections
Reflect on the assignment! Did you find anything fun, challenging,
surprising, frustrating, rewarding, etc. If you submit for a group,
you may write one reflection for each group member, or one for the whole group.

** Future work (optional)

Did you think of anything interesting to try that you did not have
time to include? If yes, this is the place to present it.

@@latex:\clearpage\appendix@@


* Useful LaTeX examples
  :PROPERTIES:
  :CUSTOM_ID: app:useful-latex-examples
  :END:
Stuff that may be important to some readers, but not all, may be
deferred to an appendix. The same is true for lengthy material that
would disrupt the flow of the document if placed immediately where it
is first referenced. Examples include code listings, file formats,
standards, complete tables of all experiments, etc.

** Figures
   :PROPERTIES:
   :CUSTOM_ID: app:figures
   :END:

Figure [[fig:image]] shows an example of a figure. Exactly /where/ (at top
or bottom of a page, on a separate page, or ''here'' in the text) to
put figures/tables is a matter of style. The author of this document
is of the opinion that ''here'' should be avoided at all cost. It
might seem advantageous to have the figure close to the text that
describes it. However, the figure/table should be as self-contained as
possible. In general, it should be possible to read and understand the
body text /without/ having to look at the figure. Thus, if you are
forced to write the body text and present the figure such that they
will work independently, your report and writing style will benefit.

As the placement of figures and other floats in LaTeX may shift due to
changes in text, you are encouraged to leave the fine-tuning of image
placement *until your document is complete*.

#+CAPTION: A figure/image caption should provide sufficient information to make the figure/image as self-explanatory as possible. The caption should be placed under the figure. The latex source shows how to include an image file into a latex document.
#+NAME: fig:image
#+ATTR_LATEX: :width 0.7\hsize :placement [tbp]
[[./camwithimage8.jpg]]

** Tables
   :PROPERTIES:
   :CUSTOM_ID: app:tables
   :END:

Tables are often used to present tabulated (no sh*t, sherlock?) data
about the experiment setup, test data, etc., or with results of the
experiments. In the former case, the body text would typically
describe what is common with the data sets and then refer to a table
with detailed information. In the latter case, do not discuss the
structure of the table in the body text! That would just confuse the
reader. Such information belongs to the caption. In general, do not
refer to the table such that the reader cannot continue without
inspecting the table. Instead, summarize enough of the content of the
table to allow the reader to continue to the next paragraph.

Data that can better be summarized in the body text should so appear,
e.g., ''The execution time for experiment x was below 2ms. The other
execution times are given in Table x.''

In all cases, consider the number of significant digits! Do not put a
gazillion decimals in your tables just because your code spits it out!
Make the table as easy to read as possible. An example of a stub of a
results table is given in Table [[tab:time-table]].

#+CAPTION: A table caption should provide information that helps the reader to understand what data is in the table. Some additional information, e.g., units can also be part of the caption. A table caption should be placed above the table proper. Use as few borders in the table as possible! For instance, adding left and right borders to the table below would make it harder to read.
#+NAME: tab:time-table
#+ATTR_LATEX: :placement [tbp]
| *Table type* | Lookup speed (ms) |
| /            | <                 |
|--------------+-------------------|
| MTFTable     | x                 |
| Arraytable   | y                 |
| DListTable   | z                 |

